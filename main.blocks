<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="11XkZSP*FO{+DWW~)2]_">player_sprite</variable><variable id="zjfJ+oh_/p)D-91onpT#">lose_size</variable><variable id=".Ws?)?TQ!usxmOuSwU83">win_size</variable></variables><block type="pxt-on-start" id="al(}H|q`)7,rx-1.5{.Q" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="l*24h/Z5DS/+Q*0]kaFo" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let redheart: Sprite = null" numlines="1" declaredvars="redheart"></mutation><next><block type="typescript_statement" id="tw8arv1qZ?3sg_WR22;f" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let arrow: Sprite = null" numlines="1" declaredvars="arrow"></mutation><next><block type="variables_set" id="LC`dd|gsbr-$1O6;=$Lg"><field name="VAR" id="11XkZSP*FO{+DWW~)2]_">player_sprite</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="@R^!R+3+TFT9VzvP#:bn" editable="false"><field name="EXPRESSION">null</field></block></value><next><block type="variables_set" id="Ef~2uaEN7SbX{WOo:q}."><field name="VAR" id="zjfJ+oh_/p)D-91onpT#">lose_size</field><value name="VALUE"><shadow type="math_number" id="XHF-nWENtcc]Jt5jK;9?"><field name="NUM">6</field></shadow></value><next><block type="variables_set" id="t9]`]bB-KsmGe@qI/CkW"><field name="VAR" id=".Ws?)?TQ!usxmOuSwU83">win_size</field><value name="VALUE"><shadow type="math_number" id="[|u9iZ*#Q,iZ{kufj,y:"><field name="NUM">120</field></shadow></value><next><block type="typescript_statement" id="syer/KFp-h|u;_F)ne`t" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SpriteKind {" line1="    //% isKind" line2="    export const Valentine = SpriteKind.create()" line3="" line4="    //% isKind" line5="    export const Arrow = SpriteKind.create()" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="Tc}%xV2@_4[n6Ik{I4[v" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace valentine {" line1="" line2="" line3="    /*" line4="     * Send a valentine in from the top" line5="     * of the screen, releasing a certain" line6="     * number of arrows" line7="     */" line8="    //% block=&quot;send valentine $valImage with $arrowNum arrows $arrowImage&quot;" line9="    //% valImage.shadow=screen_image_picker" line10="    //% arrowImage.shadow=screen_image_picker" line11="    //% arrowNum.defl=3" line12="    export function send_valentine(valImage: Image, arrowNum: number, arrowImage: Image) {" line13="        if (arrowNum &gt; 100) {" line14="            redheart = sprites.createProjectileFromSide(valImage, randint(-20, 20), randint(30, 60))" line15="            redheart.setKind(SpriteKind.Valentine)" line16="            redheart.lifespan = 5000" line17="            for (let index = 0; index &lt; 30; index++) {" line18="                arrow = sprites.createProjectileFromSprite(arrowImage, redheart, randint(-100, 100), randint(50, 100))" line19="                arrow.setKind(SpriteKind.Arrow)" line20="                arrow.startEffect(effects.coolRadial)" line21="            }" line22="        } else {" line23="            let divWidth = 100 / arrowNum" line24="            redheart = sprites.createProjectileFromSide(valImage, randint(-20, 20), randint(30, 60))" line25="            redheart.setPosition(randint(-64, 64) + scene.cameraProperty(CameraProperty.X), -34 + scene.cameraProperty(CameraProperty.Y))" line26="            redheart.setKind(SpriteKind.Valentine)" line27="            redheart.lifespan = 5000" line28="            for (let index2 = 0; index2 &lt;= arrowNum - 1; index2++) {" line29="                arrow = sprites.createProjectileFromSprite(arrowImage, redheart, divWidth * index2 - 50, 75)" line30="                arrow.setKind(SpriteKind.Arrow)" line31="            }" line32="        }" line33="    }" line34="" line35="    /*" line36="      * Set the parameters for winning" line37="      * and losing the game" line38="      */" line39="    //% block=&quot;win at width $winsize | lose at width $losesize&quot;" line40="    //% winsize.defl=120" line41="    //% losesize.defl=6" line42="    export function set_win_lose_size(winsize: number, losesize: number) {" line43="        win_size = winsize" line44="        lose_size = losesize" line45="    }" line46="" line47="    /*" line48="      * Check to see whether win or" line49="      * loss condition is met" line50="      */" line51="    //% block=&quot;check for win or loss&quot;" line52="    export function check_win_or_lose() {" line53="        for (let value of sprites.allOfKind(SpriteKind.Player)) {" line54="            if (value.width &gt;= win_size) {" line55="                game.over(true)" line56="            } else if (value.width &lt;= lose_size) {" line57="                game.over(false)" line58="            }" line59="        }" line60="    }" line61="" line62="}" numlines="63"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>